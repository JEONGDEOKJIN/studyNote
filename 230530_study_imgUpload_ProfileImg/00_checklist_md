## multer, axios, 동적 form 데이터 활용해서, 이미지 업로드하는 템플릿 체크리스트 

- 이런 순서대로 작동하고 있으니, 관련 요소를 체크해볼 것 
	- 코드 자세한 설명 깃헙 : 
``` css
[frontEnd > index.html] 
	1. <head>
		- axios script 셋팅 
	2. <body>
		- 마크업 작성 
	3. <script> 
		3.1 form 데이터를 동적으로 만들어서 > axios 로 보내기 ⭐⭐⭐
			1) form 데이터 설정 됐는지 여부 
			2) append 메소드 사용해서, 'key, value' 설정 됐는지
				- input 태그에서 id 가 설정되어서 > script 에서 곧바로 변수로 사용할 수 있게 했는지 
				- append 메소드를 쓸 때, id값.value 로 이름 잘 맞췄는지 
				- file 값 가져올 때, 잘 찾아들어갔는지 
				- file 값 axios 로 보낼 때, 미들웨어에서 받을 key 값 다시 확인
			3) axios 로 파일 전송 제대로 됐는지 여부 
				- 헤더 내용 '오타' 없는지
				- '경로 및 요청 방식' 잘 작성 했는지 
					- 도메인은 http:// 로 시작 (📛📛📛📛📛)
					- port는 node.js 실행시 작성한 서버로
	👉 다음흐름은? 
		- axios 로 보냈다. 이제, 그 경로를 따라가면서 필요한 작업 체크 
		- 우선, app.js > app.use 사용해서, 기본 라우팅 경로 설정하기


[backEnd > app.js]
	1. 기본 
		a) 전역변수, 모듈 임포트, 미들웨어, 
		- express, path, cors, json 형식을 객체로 변환, body 사용할 수 있는 미들웨어 했는지 체크
		b) 서버 대기

	2. 라우터 토스 미들웨어 
		- '/upload' 경로로 연결되는 router 정확한지 확인
		- '정적 파일 경로' 잡아줬는지 체크

	👉 다음 흐름은? 
		- 정적파일 경로는, '아, 저렇게 변화하는구나!' 라고 확인하면 됨 
		- 그러면, routers > uploads.js 로 가보자


[routers > uploads.js]
	1. 기본 
		- 모듈 설치 및 require.
			- 만들어놓은 미들웨어가 들어오는지 확인 ⭐⭐⭐ (이번 템플릿에서 중요한 기능)
			- '경로 및 요청 방식' 맞게 해주기
		- 모듈 exports

	2. '해당 경로로 요청' -> '미들웨어' 가 제대로 작동하는지 확인
		1) require 가 제대로 되고 있나 
		2) [mid > impUpload.js] 가 제대로 만들어졌나 
			a) 기본 
				- 모듈 임포트 : multer, path.
				- exports
			b) 기능 
				- storage : '파일이 들어갈 폴더' , '파일 이름' 정하기 
					- destination 에 '폴더' 이름 제대로 작성했는지 여부
					- filename 에 '오늘 날짜 반영된 파일 이름' 정하기
				- limits : 업로드 할 파일의 '최대 사이즈' 제대로 설정하기
		3) 다 잘 된다면 > 다시, 'routers > upload.js' 로 넘어가기

	3. 세 번째 매개변수(콜백함수) 확인 



[midware]
- imgUpload.js > Upload.
	'어떤 폴더' 에 '어떤 파일'을 '얼만큼의 저장공간'에 저장할지 설정

```


