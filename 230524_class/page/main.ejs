<!DOCTYPE html>

<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    
    <script src="/socket.io/socket.io.js"></script>
    
        <!-- 해석 
            <script src="/socket.io/socket.io.js"></script> | 이건, socket.io ⭐'라이브러리'⭐ 다운받을 수 있게 하는 url 임. 
        -->
            
        <!-- socket.io 모듈을 사용해서 연결을 하면 
            내부적으로 루트 경로에, socket.io.js 가 동적으로 생긴다. 
            스크립트 안에 있는 연결 객체를 사용해서 소켓 연결을 시도 한다.  -->


</head>
<body>
    
    <label for=""> 문자 </label> <br>
    <input type="text" id="text"> <br>

    <label for="">사용자 아이디</label> <br>
    <input type="text" id="user"> <br>

    <button id="btn"> 전송하기 </button>


</body>

    <script>

        window.onload = () => {

            // 소켓 객체를 사용해서 연결 
                const socket = io.connect();
                    // [생각해볼 점]
                        // io 객체를 바로 쓸 수 있는 이유는 
                            // 1) app.js 에서 server 에 소켓을 붙여서 서버를 만들었고 
                            // 2) 그 결과 자동으로 이런 스크립트가 생기는데 '<script src="/socket.io/socket.io.js"></script>'
                            // 3) 이걸, 상단에 기재해서, io. 객체를 가져올 수 있게 됨. 
                            // 즉, 1) app.js(서버에서 웹소켓 서버가 만들어졌고) , 2) script src 로 해당 내용을 가져왔기 때문에 가능함. 

                        // 이 코드를 작성하면, 어떤 일이 벌어지나. 
                            // 1) io 객체 안에 있는 connect 메소드를 써서, '클라이언트(ejs)' 와 서버가 연결된다.
                            // 2) ⭐http://localhost:8010/⭐ 에 들어가면, 1) '유저 접속' 콘솔창이 뜨고, 2) 8KAKLUR80dshdwVXAAAB 이건 '유저 id' 가 된다. 
                            // 즉, 1) '서버와 연결' 할 수 있고 2) 서버는 '유저 id' 를 받게 된다. 

                        // io 객체의 정체 
                            // 여기에서 io 는 정해진 이름인가? 아니면, 내가 맘대로 할 수 있나? 서버와 통신을 하려면, 서버에서 웹소켓 서버를 io 변수에 넣어서, 여기가 이렇게 된건가? 
                            // script 에서 받아온, 'socket.io' 의 라이브러리에서 '정해놓은 io' 객체임 
                            // 이 io 객체에 connect 메소드가 있는 것. 
                            // 즉, 라이브러리에서 받아와서 사용할 수 있게 된 객체임. 

                        // connect 메소드 의 기능 
                            // connect 메소드를 통해, '서버와 연결된 socket 객체' 가 생성된다. ⭐⭐⭐ 
                            // connect 메소드를 쓰지 않으면, '연결 되지 않는다.' 
                                // 여기까지 흐름을 보면, connect 메소드를 쓰려면, socket.io 라이브러리를 받아와야 하고,
                                // socket.io 라이브러리 를 받으려면, 서버에서, 웹 소켓 서버를 만들어야 한다. 
                                // 유기적이지만, 단계를 잘 생각해서 하면 된다. 
                            // 즉, '서버와 연결된, socket 객체' 를 만들어낸다. 
                        
                        // 'socket 객체' 특징 
                            // socket 객체가 발생시키는 이벤트
                                // 1) '서버에 성공적으로 연결' 되면, 'connect' 이벤트 
                                // 2) '서버와 연결이 끊어지면' 'disconnect'이벤트
                            // socket 객체가 이벤트를 주고 받을 수 있게 하는 메소드 
                                // 'emit 메서드' 를 통해 '서버에 이벤트를 송신' 할 수 있다. 
                                // 'on 메서드' 를 통해 '서버로 부터 이벤트를 수신' 할 수 있다.
                                // 이를 통해 '서버 - 클라이언트' 간 양방향 통신이 가능
                        
                        

            // 클라이언트가, 서버측에서, 해당 이벤트를 푸쉬하면, hi 라는,
                // [질문]
                    // 그러면, 이 전제는 서버에서, hi 라는 걸 설정해야 하는 건가
                socket.on("hi" , (data) => {
                    alert(data)
                });

                btn.onclick = () => {
                    // 클라이언트에서 서버 측으로 이벤트를 push, 두 번째 매개변수에서는 넘길 데이터를 지정
                        socket.emit("hi" , { msg : text.value, id : user.value })
                }
        }

    </script>



</html>