

// react 첫날 


// react 는 페이스북에서 2011년도 쯤에 만들었음. 

// react 는 개발자들 사이에서, 라이브러리, 프레임워크, 다 이야기가 많음. 
// 공식 홈페이지에 들어가보면, '라이브러리' 라고 이야기 하고 있음. (https://ko.legacy.reactjs.org/)

// 라이브러리 vs 프레임워크 차이 
    // 라이브러리 : 폴더의 구조가 '없음'. 
    // 프레임워크 : 폴더 구조가 '있음' 

    // 패키지를 설치할 수 있기 때문에. 
    // 리액트 개발을 할 때, 편하게, 초기 셋팅을 설치 받아서 사용할 수 있음. 
    // 폴더 구조까지 다 만들어주기 때문에, 프레임워크, 라고 말하는 블로거가 있음. 

    // 즉, 메타에서 개발한 것은, react, react-router 라이브러리
    // 메타에서 개발하고, 오픈소스에 기여중임. 

    // 리액트를 프레임워크라고 하는 이유는? 
        // 메타에서 라이브러리를 개발하고 
        // 명령어는 npx create-react-app [폴더명] 
            // 이렇게 하면, 개발하기 편하게 초기 셋팅이 됨.
            // 이렇게 하면, react 권장 개발 환경을 구성해준다. 
            // react 프로젝트 설정
            // 그래서 블로그나 개발자들이 '프레임 워크' 라고 하기도 한다. 
            // 다만, 교수님은 라이브러리라고 봄. 


// 리액트는 화면을 꾸밈을 구성할 때, 자바스크립트를 활용해서, HTML 을 조작해줌. DOM 
    // 효율적인 브라우저 렌더링을 위해 
    // MVC 패턴 중 'VIEW 중심임'.⭐⭐⭐ 
    // 페이지를 효율적으로 업데이트 하기 위해서. 
    // react 는 가상 DOM 이 있어서 -> 변경된 부분만 다시 그림(update) 

    // 일반적인 (정적) html 은, -> 전체 페이지를 다시 그림. 변경된 부분만 다시 그리지 않음.  
    // react 의 의 ⭐가상DOM⭐ 은, -> 메모리에 남아있고, 실제 페이지의 dom 은 분리 되어 있는 상태 
    // react 의 상태가 변하면, 가상 DOM 이 생성되고, 이전 상태의 가상 DOM 과 비교해서, -> 틀린 그림 찾기를 함
    // ⭐틀린 그림⭐ 찾으면 -> 실제 DOM 에 업데이트 해준다. 
    // 그래서, 효율적인 업데이트가 가능하다. 

// 포인트 
    // 1) 변화된 부분만 그린다 
    // 2) 최소한만 그린다 -> 그래서 '효율적' 임


// 리액트를 사용하는 이유 
    // 1) 리액트의 '부분 렌더링' 
    // 2) 리액트는 view 중심으로 보여주는 것에 집중된 라이브러리


// PHP EJS 를 써서 SSR(서버 사이드 렌더링)
    // PHP : 서버에서 페이지를 완성시켜서, 브라우저에, 그려주는 것. 

    // 이렇게 하다가, 클라이언트에서 페이지를 구성하는 것을 하고 싶다. -> 그래서 CSR 이 나옴 (REACT, VUE, 앵귤러) 

    // react는 DOM 조작을 쉽게 하기 위해 사용함. 
    // single page application 만들기 위해 사용한다. 
    // 이 친구는 새로고침이 없음. 
    // 1) url 은 변함. 변하는 경로를 react-router 가 잡아주
    // 2) 내용물을 바뀌어서, 페이지가 바뀐 것 처럼 속임.
        // 하나의 페이지에서, 내용물을 바꿔서 페이지가 변환된 것 처럼 보여줌.


// react 를 만든 사람들
    // 자바스크립트를 잘하는 사람들이 아니고 
    // 개발을 잘하는 사람들이 모여서 만들었음. 
    // class 문법으로 되어 있음. -> so, 진입장벽이 조금 있음. 


// DOM 제어해보기 
    // INDEX.HTML